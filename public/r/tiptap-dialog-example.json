{
	"name": "tiptap-dialog-example",
	"type": "registry:example",
	"files": [
		{
			"path": "examples/tiptap-dialog-example.tsx",
			"type": "registry:example",
			"content": "import React, { useCallback, useState } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Dialog, DialogClose, DialogContent, DialogHeader, DialogTitle, DialogFooter,DialogTrigger,DialogDescription } from \"@/components/ui/dialog\";\n\nimport classNames from \"classnames\";\n// => Tiptap packages\nimport { useEditor, EditorContent, Editor, BubbleMenu } from \"@tiptap/react\";\nimport Document from \"@tiptap/extension-document\";\nimport Paragraph from \"@tiptap/extension-paragraph\";\nimport Text from \"@tiptap/extension-text\";\nimport Link from \"@tiptap/extension-link\";\nimport Bold from \"@tiptap/extension-bold\";\nimport Underline from \"@tiptap/extension-underline\";\nimport Italic from \"@tiptap/extension-italic\";\nimport Strike from \"@tiptap/extension-strike\";\nimport Code from \"@tiptap/extension-code\";\nimport History from \"@tiptap/extension-history\";\n\nimport { Button } from \"@/components/ui/button\";\n\n// Custom\nimport content from \"@/components/TextContent\";\n\nimport {\n  BoldIcon,\n  Code2,\n  ItalicIcon,\n  Link2,\n  RotateCcw,\n  RotateCw,\n  Strikethrough,\n  UnderlineIcon,\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\n\nimport { useCustomComponentStore } from \"@/stores/useCustomComponentStore\";\n\nconst TiptapDialog: React.FC = ()=> {\n  const {\n    sectionClassName,\n    cardClassName,\n    titleClassName,\n    descriptionClassName,\n    buttonColor,\n    cardTitle,\n    cardDescription,\n    dialogTitle,\n    dialogDescription,\n    closeButton,\n    openDialog,\n  } = useCustomComponentStore();\n\nconst editor = useEditor({\n    extensions: [\n      Document,\n      History,\n      Paragraph,\n      Text,\n      Link.configure({\n        openOnClick: false,\n      }),\n      Bold,\n      Underline,\n      Italic,\n      Strike,\n      Code,\n    ],\n    content,\n  }) as Editor;\n\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [url, setUrl] = useState<string>(\"\");\n\n  const openDialogClick = useCallback(() => {\n    setUrl(editor.getAttributes(\"link\").href);\n    setDialogOpen(true);\n  }, [editor]);\n\n  const closeDialog = useCallback(() => {\n    setDialogOpen(false);\n    setUrl(\"\");\n  }, []);\n\n  const saveLink = useCallback(() => {\n    if (url) {\n      editor\n        .chain()\n        .focus()\n        .extendMarkRange(\"link\")\n        .setLink({ href: url, target: \"_blank\" })\n        .run();\n    } else {\n      editor.chain().focus().extendMarkRange(\"link\").unsetLink().run();\n    }\n    closeDialog();\n  }, [editor, url, closeDialog]);\n\n  const removeLink = useCallback(() => {\n    editor.chain().focus().extendMarkRange(\"link\").unsetLink().run();\n    closeDialog();\n  }, [editor, closeDialog]);\n\n  const toggleBold = useCallback(() => {\n    editor.chain().focus().toggleBold().run();\n  }, [editor]);\n\n  const toggleUnderline = useCallback(() => {\n    editor.chain().focus().toggleUnderline().run();\n  }, [editor]);\n\n  const toggleItalic = useCallback(() => {\n    editor.chain().focus().toggleItalic().run();\n  }, [editor]);\n\n  const toggleStrike = useCallback(() => {\n    editor.chain().focus().toggleStrike().run();\n  }, [editor]);\n\n  const toggleCode = useCallback(() => {\n    editor.chain().focus().toggleCode().run();\n  }, [editor]);\n\n  if (!editor) {\n    return null;\n  }\n  \n  return (\n    <section className={`${sectionClassName} rounded-lg border border-gray-300`}>\n      <Card className={cardClassName}>\n        <CardHeader>\n          <CardTitle className={titleClassName}>{cardTitle}</CardTitle>\n          <CardDescription className={descriptionClassName}>\n            {cardDescription}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Dialog>\n      <DialogTrigger asChild>\n        <Button\n          variant=\"default\"\n          className=\"flex justify-center mx-auto\"\n          style={{ backgroundColor: buttonColor }}\n        >\n          {openDialog}\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[400px]\">\n        <DialogHeader>\n          <DialogTitle>{dialogTitle}</DialogTitle>\n          <DialogDescription>{dialogDescription}</DialogDescription>\n        </DialogHeader>\n        <DialogFooter className=\"flex justify-center items-center mx-auto flex-col gap-3\">\n          {/* simple edit */}\n            <div className=\"editor\">\n                <div className=\"mb-3\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => editor.chain().focus().undo().run()}\n                    disabled={!editor.can().undo()}\n                  >\n                    <RotateCcw />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => editor.chain().focus().redo().run()}\n                    disabled={!editor.can().redo()}\n                  >\n                    <RotateCw />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    className={classNames({ \"is-active\": editor.isActive(\"link\") })}\n                    onClick={openDialogClick}\n                  >\n                    <Link2 />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    className={classNames({ \"is-active\": editor.isActive(\"bold\") })}\n                    onClick={toggleBold}\n                  >\n                    <BoldIcon />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    className={classNames({ \"is-active\": editor.isActive(\"underline\") })}\n                    onClick={toggleUnderline}\n                  >\n                    <UnderlineIcon />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    className={classNames({ \"is-active\": editor.isActive(\"italic\") })}\n                    onClick={toggleItalic}\n                  >\n                    <ItalicIcon />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    className={classNames({ \"is-active\": editor.isActive(\"strike\") })}\n                    onClick={toggleStrike}\n                  >\n                    <Strikethrough />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    className={classNames({ \"is-active\": editor.isActive(\"code\") })}\n                    onClick={toggleCode}\n                  >\n                    <Code2 />\n                  </Button>\n                </div>\n                <BubbleMenu\n                  className=\"bubble-menu-light ml-10\"\n                  tippyOptions={{ duration: 150 }}\n                  editor={editor}\n                  shouldShow={({ editor, view, state, oldState, from, to }) => {\n                    return from === to && editor.isActive(\"link\");\n                  }}\n                >\n                  <Button onClick={openDialogClick} className=\"ml-20\">\n                    Edit\n                  </Button>\n                  <Button variant=\"destructive\" onClick={removeLink}>\n                    Remove\n                  </Button>\n                </BubbleMenu>\n                <EditorContent editor={editor} />\n                {/* Shadcn Dialog */}\n                <Dialog open={dialogOpen} onOpenChange={closeDialog}> \n                  <DialogContent>\n                    <DialogTitle>Edit Link</DialogTitle>\n\n                    <Input\n                      type=\"text\"\n                      value={url}\n                      onChange={(e) => setUrl(e.target.value)}\n                      placeholder=\"Enter URL\"\n                      className=\"w-full h-10 border-none\"\n                    />\n\n                    <div className=\"flex justify-end items-center gap-2 p-3\">\n                      <Button onClick={saveLink}>Save</Button>\n                      <Button variant=\"destructive\" onClick={removeLink}>\n                        Remove\n                      </Button>\n                      <Button variant=\"outline\" onClick={closeDialog}>\n                        Cancel\n                      </Button>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n            </div>\n          <DialogClose asChild>\n            <Button\n              type=\"button\"\n              variant=\"default\"\n              style={{ backgroundColor: buttonColor }}\n            >\n              {closeButton}\n            </Button>\n          </DialogClose>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n        </CardContent>\n      </Card>\n    </section>\n  );\n};\n\nexport default TiptapDialog;",
			"target": "components/tiptap-dialog-example.tsx"
		}
	]
}
